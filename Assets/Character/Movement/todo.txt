X. buffer for normal jump (time)
	- if isJumping and hasDoubleJumped is true , and space pressed
		- sets a timer for .2 seconds
		- in this .2 second time frame, if isGrounded = true, jump

X. buffer for normal jump (distance)
	- if the user has both jumped and doublejumped, and if jump is pressed when the character is X dist from floor, it will jump once isGrounded is true
	- if the user has jumped and is too close to the floor, it will skip a double jump and wait until the floor is touched

	- tested; there are many flaws with this method. 
		- firstly, it doesn't take into account a dash - if the user presses dash then jump very early on in the dash, and is close to the floor, then the user might get a very very delayed jump
		- it isn't really scalable with slower fall speeds. if the user is falling really slow, the jump buffer might feel really delayed
		- and lastly, the functionality of switching a double jump to a normal jump isn't really too useful. not many players will try to double jump last second

X. coyote time for normal jump
	- completed: seems pretty solid and a decent feature

X. wallJump 
	- force in opposite of wall x and +y 
	- disables walk for a bit 

X. add character facing direction script 

X. use direction char is facing instead of current input 

X. organize jump vars in birdJump file 

X. at 3/4th of jump: 
	X. disable downward force
	X. player gravity decreases by a bit 

X. add controllable jump height for double and wall jump as well 
	- add 3/4ths height for all of them
		- this requires you to know the last jump input 
		- takes the last jump input, and then calculates amount of time it takes to reach 3/4ths 
		- if 3/4ths is reached, then disable downward force

X. dash
	X. possible glitch if the character is not moving and facing the same direction? may move backwards after dash ended.
	- disable jump input when dashing
	- if hits wall, make dash timer a little shorter

X. organize vars
	X. normal -> first
	X. double -> second

- add effects 
	X. dash emits a trail
	- double jump produces an effect

X. direction bug when the character taps one direction while moving another
	X. can prolly (?) be fixed by polling for key held down instead of key press (this was the fix)

X. disable any user input during dash

X. separate input manager and actual movement into two functions

X. separate all of input and movement into different files

X. separate collison into a new file

X. make it so that the bounciness function only is applied if downforce hasn't been applied yet or based off of velocity 
    - doesn't need to be done if downforce hasn't been applied yet, fixed thru accel and vel bounciness solution because at that down vel it doesn't matter

X. make it so that bounciness function is based off of current accel and vel

- decrease buffer for jump and downforce

- buffer for jump during dash 

- slow down sliding down wall when touching wall (friction or gravity?)

- change raycast to boxcast so isgrounded is true even if standing on edge

notable features:
	- if dash doesn't disable any input, jumping while dashing can be pretty fun

notes:
    - set composite to polygon, otherwise it's not perfectly flat 
    - lock z axis for char
    - add phys mat with 0 bounce 0 fric to both level and char so you can control it 
    - collision: cont, sleeping mode: never sleep (doesn't really matter), interpolate: interpolate (extrapolate is okay but it's not really optimal cuz it guesses values). interpolate smooths out the movement and prevents it from being jittery
